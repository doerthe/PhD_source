%\subsection{Implicit Quantification}
\label{iq}
Having discussed how implicit quantification is handled in \rdf{} -- \rdf only allows implicit existential quantification and 
in most cases this quantification is not nested\footnote{The only possible exception is TriG where the semantics is not fixed.} -- we now take a broader look 
to other frameworks related to \rdf or rule-based reasoning which support some kind of implicit quantification.

Implicit quantification is widely used in different contexts. Most frameworks around \rdf support the use of \emph{blank nodes}. 
Hogan et al~\cite{blanks} provide an overview of their meaning and use in these different contexts. In \rdf and RDFS, blank nodes stand, just as in \nthree, for
implicitly existentially quantified variables. The quantification is local, ie the same blank nodes cannot be shared between different documents and the existential quantification 
always counts for a graph. Traditionally, \rdf does not support nested graph constructions. This means that all blank nodes occurring
in \nthree triples which  are also valid in \rdf have the same meaning in both frameworks.
% In the newer addition TriG~\cite{TriG} different graph constructs indicated by the \texttt{\{\}}-construct can have common blank nodes.\footnote{\url{https://www.w3.org/TR/trig/\#terms-blanks-nodes}}
% Where these blank nodes are quantified depends on the semantics chosen.
%If we understand these constructs as nested graphs, this is a clear difference to \nthree.\todo{point out that and why this is problematic}
Hogan et al furthermore point out that, despite the clear definition, users do not always understand and use blank nodes as existentially quantified variables in \rdf: 
often blank nodes are rather used to refer a concrete object whose \iri is unknown. % than to express existential knowledge. 
A possible reason 
for that is that SPARQL~\cite{sparql} interprets blank nodes occurring in the queried \rdf graph exactly in that manner. Also in \nthree or at least in the \nthree implementation provided by the 
EYE reasoner we can find some built-in functions which treat blank nodes that way, an example is the predicate 
\texttt{e:findall}\footnote{\url{http://eulersharp.sourceforge.net/2003/03swap/eye-builtins.html}} from EYE.
Built-in functions are excluded from this paper but certainly form a major challenge in our future work. 

Implicit universal quantification can be found in different programming languages and \rdf related frameworks:
in Prolog \cite{Prolog} variables are understood to be universally quantified. The scope of this quantification is the clause in which the variable occurs. This 
is similar to the universal quantification on top level as implemented in EYE.
But as Prolog does not allow the construction of nested rules, 
which form the biggest challenge for the determination of scoping in \nthree, Prolog's quantification is only partly comparable to \nthree's. 
%
The \rdf-query language SPARQL \cite{sparql} supports \emph{query variables} which, if a query is understood as some kind of filter rule, can be seen as universally quantified. 
SPARQL allows nesting of graphs and queries. A SPARQL query consists of two parts, an outer part starting with one of the keywords SELECT, DESCRIBE, ASK, or CONSTRUCT 
which can contain search variables and a WHERE-part which specifies 
the search pattern. If a query is nested in another one, ie a new query occurs in the WHERE-part of another query, only the universal variables which occur in the SELECT-part of the 
sub-query share their variables with the WHERE-part of the top query.\footnote{\url{https://www.w3.org/TR/2013/REC-sparql11-query-20130321/\#subqueries}} 
The aspect that variables in nested queries are clearly separated in these cases is slightly similar to the separation of different deeply nested graphs in \nthree.
However, when we translate such nested queries to core logic rules, we only need to rename identical variables occurring separately on different levels, the universal quantifier for all variables 
is still on top level.
%But, if we wanted to represent these queries as core logic rules we would need to rename some of the variables, the quantifier would remain on top level.

